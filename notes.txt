

grade-dd-rules... default to (current-data-design)

rename grade-encapsulated-template-fns to with-encapsulated-fn-designs


grade-signature|template... default to (current-function-design)


These currently take required fn-name first argument (fn-defn for the ones that aren't syntax):
         grade-questions-intact
         grade-questions-intact/body
         grade-nr-intact grade-mr-intact grade-nh-intact
         grade-try-catch grade-no-try-catch
         grade-accumulator-intact
         grade-prohibited-calls
So they could switch to having two forms, one that pulls from (current-function-design) and one that takes the fn-design explicitly.



========

grade-...    these quote code and pull items to grade from file context

grade-...*   these do no quoting, they do pull items to grade from file context

check-...    no quoting, and they grade only their explicit arguments


-- Highly declarative graders for special problem types


grade-mcq
grade-steps
grade-lifted-definitions
grade-design-abstract-fold
grade-2-one-of

grade-dd-rules-and-template
grade-dd-rules
grade-dd-template


Macros that establish what function(s) are being graded

what is bound? fn-name, fn-definition, compound of both?

we can't say that defn is easy to get if we have name because sometimes we are inside encapsulated,
unless grade-encapsulated binds (current-defns) for us, hmmm


(grade-htdf foo       ;(@htdf foo ...) foo is 'foo; (current-defns) is (list '(define (foo )) ...)
(grade-htdf $foo      ;(@htdf any ...) foo is 'any; ...
(grade-htdf (foo bar) ;(@htdf foo bar) foo is 'foo, bar is 'bar; ...
(grade-htdf (*   bar) ;(@htdf *   bar) bar is 'bar; ...

grade-helper                    sort helper; helper is 'insert
grade-bb-helper                 on-mouse handler; handler is 'on-mouse
grade-encapsulated-template-fns (foo bar ...); foo is 'foo, bar is 'bar...

Inside ALL the above, (get-htdf) (get-defns) (get-defn 'foo) all work
!!! get-defns and get-defn already exist with slightly different behaviour

(context)
(current-htdd)
(current-htdf)b


(rename get-htdf* to find-htdf, to match helper names for grade-helper and grade-bb-helper)


what if there was:

(struct htdd (tag structs type-comment examples origin template)) 
(struct htdf (tag sig purpose checks origin template defn)) ;all should be syntax

in real terms, is that any different than just having

(find-sig/purpose...)




Below all (should) take an optional first argument that is whatever the above bound the parameter to.  Or use something like parameterize when it's needed?


grade-signature
grade-signature-by-constraints 

grade-template-origin
grade-template-origin

grade-validity
grade-argument-thoroughness
grade-fault-identification


grade-template/types
grade-template/body


grade-constants-used

grade-template-intact
grade-questions-intact
grade-nr-intact
grade-mr-intact
grade-try-catch
grade-no-try-catch
grade-not-recursive
grade-tail-recursive
grade-accumulator-intact
grade-prohibited-calls

grade-use-bia-fn



grade-submitted-tests
grade-additional-tests

grade-prerequisite

Type expressions.

The type expression design deliberately makes the nature of any type references explicit at the point of reference.
